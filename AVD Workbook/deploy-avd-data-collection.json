{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "description": "Deploy comprehensive data collection infrastructure for AVD storage analytics and ANF planning"
  },  "parameters": {    "logAnalyticsWorkspaceName": {
      "type": "string",
      "defaultValue": "[concat('AVDStorageAuditLAW', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of the Log Analytics workspace for AVD storage data collection",
        "strongType": "Microsoft.OperationalInsights/workspaces"
      }
    },
    "dataRetentionDays": {
      "type": "int",
      "defaultValue": 90,
      "minValue": 30,
      "maxValue": 730,
      "metadata": {
        "description": "Number of days to retain log data"
      }
    },
    "enableHostPoolDiagnostics": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable diagnostic settings for all AVD Host Pools in subscription"
      }
    },
    "enableSessionHostDiagnostics": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable diagnostic settings and performance counters for AVD Session Hosts"
      }
    },
    "enableStorageDiagnostics": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable diagnostic settings for Storage Accounts used by AVD"
      }
    },
    "enableANFDiagnostics": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable diagnostic settings for Azure NetApp Files volumes"
      }
    }
  },  "variables": {
    "location": "[resourceGroup().location]",
    "subscriptionId": "[subscription().subscriptionId]",
    "dataCollectionRuleName": "[concat('dcr-avd-storage-', uniqueString(resourceGroup().id))]",
    "dataCollectionEndpointName": "[concat('dce-avd-storage-', uniqueString(resourceGroup().id))]",
    "managedIdentityName": "[concat('id-avd-storage-', uniqueString(resourceGroup().id))]"
  },"resources": [    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "name": "[variables('managedIdentityName')]",
      "location": "[variables('location')]"
    },    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceGroup().id, variables('managedIdentityName'), 'Contributor')]",
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))]"
      ],
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName')), '2023-01-31').principalId]",
        "principalType": "ServicePrincipal",
        "scope": "[resourceGroup().id]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",      "apiVersion": "2023-09-01",
      "name": "[parameters('logAnalyticsWorkspaceName')]",
      "location": "[variables('location')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": "[parameters('dataRetentionDays')]",
        "features": {
          "enableLogAccessUsingOnlyResourcePermissions": true
        }
      }
    },
    {
      "type": "Microsoft.Insights/dataCollectionEndpoints",
      "apiVersion": "2022-06-01",      "name": "[variables('dataCollectionEndpointName')]",
      "location": "[variables('location')]",
      "properties": {
        "description": "Data collection endpoint for AVD storage analytics",
        "networkAcls": {
          "publicNetworkAccess": "Enabled"
        }
      }
    },
    {
      "type": "Microsoft.Insights/dataCollectionRules",      "apiVersion": "2022-06-01",
      "name": "[variables('dataCollectionRuleName')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]",
        "[resourceId('Microsoft.Insights/dataCollectionEndpoints', variables('dataCollectionEndpointName'))]"
      ],
      "properties": {
        "description": "Data collection rule for AVD storage performance metrics",
        "dataCollectionEndpointId": "[resourceId('Microsoft.Insights/dataCollectionEndpoints', variables('dataCollectionEndpointName'))]",
        "dataSources": {
          "performanceCounters": [
            {
              "name": "VMPerfCounters",
              "streams": [
                "Microsoft-Perf"
              ],
              "scheduledTransferPeriod": "PT1M",
              "samplingFrequencyInSeconds": 60,
              "counterSpecifiers": [
                "\\LogicalDisk(*)\\Disk Read Bytes/sec",
                "\\LogicalDisk(*)\\Disk Write Bytes/sec",
                "\\LogicalDisk(*)\\Disk Reads/sec",
                "\\LogicalDisk(*)\\Disk Writes/sec",
                "\\LogicalDisk(*)\\Current Disk Queue Length",
                "\\LogicalDisk(*)\\Avg. Disk sec/Read",
                "\\LogicalDisk(*)\\Avg. Disk sec/Write",
                "\\LogicalDisk(*)\\Free Megabytes",
                "\\LogicalDisk(*)\\% Free Space",
                "\\Memory\\Available MBytes",
                "\\Memory\\% Committed Bytes In Use",
                "\\Processor(_Total)\\% Processor Time",
                "\\System\\Processor Queue Length",
                "\\Network Interface(*)\\Bytes Total/sec",
                "\\Network Interface(*)\\Current Bandwidth",
                "\\Terminal Services\\Active Sessions",
                "\\Terminal Services\\Inactive Sessions",
                "\\User Profile Service\\Profile loads",
                "\\User Profile Service\\Profile unloads"
              ]
            }
          ],
          "windowsEventLogs": [
            {
              "name": "AVDEventLogs",
              "streams": [
                "Microsoft-WindowsEvent"
              ],
              "xPathQueries": [
                "Microsoft-Windows-TerminalServices-LocalSessionManager/Operational!*[System[(Level=2 or Level=3 or Level=4)]]",
                "Microsoft-Windows-TerminalServices-RemoteConnectionManager/Operational!*[System[(Level=2 or Level=3 or Level=4)]]",
                "Microsoft-FSLogix-Apps/Operational!*[System[(Level=1 or Level=2 or Level=3 or Level=4)]]",
                "Microsoft-FSLogix-Apps/Admin!*[System[(Level=1 or Level=2 or Level=3 or Level=4)]]",
                "Microsoft-Windows-User Profile Service/Operational!*[System[(Level=1 or Level=2 or Level=3 or Level=4)]]",
                "Application!*[System[Provider[@Name='Microsoft-Windows-User Profiles Service'] and (Level=2 or Level=3)]]",
                "System!*[System[Provider[@Name='Microsoft-Windows-Winlogon'] and (Level=2 or Level=3)]]"
              ]
            }
          ]
        },
        "destinations": {
          "logAnalytics": [
            {
              "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]",
              "name": "AVDStorageWorkspace"
            }
          ]
        },
        "dataFlows": [
          {
            "streams": [
              "Microsoft-Perf"
            ],
            "destinations": [
              "AVDStorageWorkspace"
            ]
          },
          {
            "streams": [
              "Microsoft-WindowsEvent"
            ],
            "destinations": [
              "AVDStorageWorkspace"
            ]
          }
        ]
      }
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2023-08-01",      "name": "configureAVDDiagnostics",
      "location": "[variables('location')]",      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]",
        "[resourceId('Microsoft.Insights/dataCollectionRules', variables('dataCollectionRuleName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))]",
        "[guid(resourceGroup().id, variables('managedIdentityName'), 'Contributor')]"
      ],"kind": "AzurePowerShell",      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))]": {}
        }
      },
      "properties": {
        "azPowerShellVersion": "10.0",
        "retentionInterval": "PT1H",
        "timeout": "PT30M",
        "arguments": "[concat('-SubscriptionId ', variables('subscriptionId'), ' -WorkspaceName ', parameters('logAnalyticsWorkspaceName'), ' -ResourceGroupName ', resourceGroup().name, ' -EnableHostPool ', parameters('enableHostPoolDiagnostics'), ' -EnableStorage ', parameters('enableStorageDiagnostics'), ' -EnableANF ', parameters('enableANFDiagnostics'), ' -DataCollectionRuleName ', variables('dataCollectionRuleName'))]",        "scriptContent": "param([string]$SubscriptionId,[string]$WorkspaceName,[string]$ResourceGroupName,[bool]$EnableHostPool,[bool]$EnableStorage,[bool]$EnableANF,[string]$DataCollectionRuleName); $ErrorActionPreference = 'Stop'; Import-Module Az.Accounts, Az.Monitor, Az.DesktopVirtualization, Az.Storage, Az.NetAppFiles -Force; Write-Output 'Starting AVD diagnostic configuration...'; Write-Output \"Subscription: $SubscriptionId\"; Write-Output \"Workspace: $WorkspaceName\"; Set-AzContext -SubscriptionId $SubscriptionId; $workspace = Get-AzOperationalInsightsWorkspace -ResourceGroupName $ResourceGroupName -Name $WorkspaceName; $workspaceResourceId = $workspace.ResourceId; Write-Output \"Workspace Resource ID: $workspaceResourceId\"; $dcrResourceId = \"/subscriptions/$SubscriptionId/resourceGroups/$ResourceGroupName/providers/Microsoft.Insights/dataCollectionRules/$DataCollectionRuleName\"; $results = @(); if ($EnableHostPool) { Write-Output 'Configuring AVD Host Pool diagnostics...'; try { $hostPools = Get-AzWvdHostPool; foreach ($hostPool in $hostPools) { Write-Output \"Processing Host Pool: $($hostPool.Name)\"; $diagnosticSettingName = \"avd-storage-analytics-$($hostPool.Name)\"; $logCategories = @(@{ Category = 'Checkpoint'; Enabled = $true }, @{ Category = 'Error'; Enabled = $true }, @{ Category = 'Management'; Enabled = $true }, @{ Category = 'Connection'; Enabled = $true }, @{ Category = 'HostRegistration'; Enabled = $true }, @{ Category = 'AgentHealthStatus'; Enabled = $true }, @{ Category = 'NetworkData'; Enabled = $true }, @{ Category = 'SessionHostManagement'; Enabled = $true }); $diagnosticSetting = @{ Name = $diagnosticSettingName; ResourceId = $hostPool.Id; WorkspaceId = $workspaceResourceId; Log = $logCategories; Enabled = $true }; try { New-AzDiagnosticSetting @diagnosticSetting; $results += \"SUCCESS: Configured diagnostics for Host Pool $($hostPool.Name)\" } catch { $results += \"WARNING: Failed to configure diagnostics for Host Pool $($hostPool.Name): $($_.Exception.Message)\" } } } catch { $results += \"ERROR: Failed to process Host Pools: $($_.Exception.Message)\" } }; if ($EnableStorage) { Write-Output 'Configuring Storage Account diagnostics...'; try { $storageAccounts = Get-AzStorageAccount; foreach ($storageAccount in $storageAccounts) { if ($storageAccount.StorageAccountName -match 'avd|profile|fslogix|vdi|wvd' -or $storageAccount.Tags.ContainsKey('AVD') -or $storageAccount.Tags.ContainsKey('FSLogix')) { Write-Output \"Processing Storage Account: $($storageAccount.StorageAccountName)\"; $diagnosticSettingName = \"avd-storage-analytics-$($storageAccount.StorageAccountName)\"; $logCategories = @(@{ Category = 'StorageRead'; Enabled = $true }, @{ Category = 'StorageWrite'; Enabled = $true }, @{ Category = 'StorageDelete'; Enabled = $true }); $metricCategories = @(@{ Category = 'Transaction'; Enabled = $true }, @{ Category = 'Capacity'; Enabled = $true }); try { New-AzDiagnosticSetting -Name $diagnosticSettingName -ResourceId $storageAccount.Id -WorkspaceId $workspaceResourceId -Log $logCategories -Metric $metricCategories; $results += \"SUCCESS: Configured diagnostics for Storage Account $($storageAccount.StorageAccountName)\"; $blobServiceResourceId = \"$($storageAccount.Id)/blobServices/default\"; New-AzDiagnosticSetting -Name \"$diagnosticSettingName-blob\" -ResourceId $blobServiceResourceId -WorkspaceId $workspaceResourceId -Log $logCategories -Metric $metricCategories; $results += \"SUCCESS: Configured blob diagnostics for Storage Account $($storageAccount.StorageAccountName)\"; $fileServiceResourceId = \"$($storageAccount.Id)/fileServices/default\"; New-AzDiagnosticSetting -Name \"$diagnosticSettingName-file\" -ResourceId $fileServiceResourceId -WorkspaceId $workspaceResourceId -Log $logCategories -Metric $metricCategories; $results += \"SUCCESS: Configured file diagnostics for Storage Account $($storageAccount.StorageAccountName)\" } catch { $results += \"WARNING: Failed to configure diagnostics for Storage Account $($storageAccount.StorageAccountName): $($_.Exception.Message)\" } } } } catch { $results += \"ERROR: Failed to process Storage Accounts: $($_.Exception.Message)\" } }; if ($EnableANF) { Write-Output 'Configuring Azure NetApp Files diagnostics...'; try { $netAppAccounts = Get-AzNetAppFilesAccount; foreach ($netAppAccount in $netAppAccounts) { Write-Output \"Processing NetApp Account: $($netAppAccount.Name)\"; $capacityPools = Get-AzNetAppFilesPool -ResourceGroupName $netAppAccount.ResourceGroupName -AccountName $netAppAccount.Name; foreach ($pool in $capacityPools) { $volumes = Get-AzNetAppFilesVolume -ResourceGroupName $netAppAccount.ResourceGroupName -AccountName $netAppAccount.Name -PoolName $pool.Name; foreach ($volume in $volumes) { Write-Output \"Processing Volume: $($volume.Name)\"; $diagnosticSettingName = \"avd-storage-analytics-$($volume.Name)\"; $metricCategories = @(@{ Category = 'AllMetrics'; Enabled = $true }); try { New-AzDiagnosticSetting -Name $diagnosticSettingName -ResourceId $volume.Id -WorkspaceId $workspaceResourceId -Metric $metricCategories; $results += \"SUCCESS: Configured diagnostics for ANF Volume $($volume.Name)\" } catch { $results += \"WARNING: Failed to configure diagnostics for ANF Volume $($volume.Name): $($_.Exception.Message)\" } } } } } catch { $results += \"WARNING: Failed to process Azure NetApp Files (may not be present): $($_.Exception.Message)\" } }; Write-Output ''; Write-Output '=== CONFIGURATION RESULTS ==='; $results | ForEach-Object { Write-Output $_ }; $DeploymentScriptOutputs = @{ 'workspaceResourceId' = $workspaceResourceId; 'dataCollectionRuleId' = $dcrResourceId; 'configurationResults' = $results -join '; ' }"
      }
    }
  ],  "outputs": {
    "logAnalyticsWorkspaceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
    },
    "logAnalyticsWorkspaceName": {
      "type": "string",
      "value": "[parameters('logAnalyticsWorkspaceName')]"
    },
    "dataCollectionRuleId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Insights/dataCollectionRules', variables('dataCollectionRuleName'))]"
    },
    "dataCollectionEndpointId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Insights/dataCollectionEndpoints', variables('dataCollectionEndpointName'))]"
    },
    "managedIdentityId": {
      "type": "string",
      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))]"
    },
    "managedIdentityPrincipalId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName')), '2023-01-31').principalId]"
    }
  }
}
